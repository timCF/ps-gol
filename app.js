(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
// Generated by psc-bundle 0.8.5.0
var PS = {};
(function(exports) {
  /* global exports */
  "use strict";

  // module Prelude

  //- Functor --------------------------------------------------------------------

  exports.arrayMap = function (f) {
    return function (arr) {
      var l = arr.length;
      var result = new Array(l);
      for (var i = 0; i < l; i++) {
        result[i] = f(arr[i]);
      }
      return result;
    };
  };

  //- Bind -----------------------------------------------------------------------

  exports.arrayBind = function (arr) {
    return function (f) {
      var result = [];
      for (var i = 0, l = arr.length; i < l; i++) {
        Array.prototype.push.apply(result, f(arr[i]));
      }
      return result;
    };
  };

  //- Eq -------------------------------------------------------------------------

  exports.refEq = function (r1) {
    return function (r2) {
      return r1 === r2;
    };
  };

  //- Ord ------------------------------------------------------------------------

  exports.unsafeCompareImpl = function (lt) {
    return function (eq) {
      return function (gt) {
        return function (x) {
          return function (y) {
            return x < y ? lt : x > y ? gt : eq;
          };
        };
      };
    };
  };

  //- Bounded --------------------------------------------------------------------

  exports.topInt = 2147483647;
  exports.bottomInt = -2147483648;

  //- Show -----------------------------------------------------------------------

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showNumberImpl = function (n) {
    /* jshint bitwise: false */
    return n === (n | 0) ? n + ".0" : n.toString();
  };
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Prelude"];
  var LT = (function () {
      function LT() {

      };
      LT.value = new LT();
      return LT;
  })();
  var GT = (function () {
      function GT() {

      };
      GT.value = new GT();
      return GT;
  })();
  var EQ = (function () {
      function EQ() {

      };
      EQ.value = new EQ();
      return EQ;
  })();
  var Functor = function (map) {
      this.map = map;
  };
  var Apply = function (__superclass_Prelude$dotFunctor_0, apply) {
      this["__superclass_Prelude.Functor_0"] = __superclass_Prelude$dotFunctor_0;
      this.apply = apply;
  };
  var Applicative = function (__superclass_Prelude$dotApply_0, pure) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.pure = pure;
  };
  var Bind = function (__superclass_Prelude$dotApply_0, bind) {
      this["__superclass_Prelude.Apply_0"] = __superclass_Prelude$dotApply_0;
      this.bind = bind;
  };
  var Monad = function (__superclass_Prelude$dotApplicative_0, __superclass_Prelude$dotBind_1) {
      this["__superclass_Prelude.Applicative_0"] = __superclass_Prelude$dotApplicative_0;
      this["__superclass_Prelude.Bind_1"] = __superclass_Prelude$dotBind_1;
  };
  var Eq = function (eq) {
      this.eq = eq;
  };
  var Ord = function (__superclass_Prelude$dotEq_0, compare) {
      this["__superclass_Prelude.Eq_0"] = __superclass_Prelude$dotEq_0;
      this.compare = compare;
  };
  var Bounded = function (bottom, top) {
      this.bottom = bottom;
      this.top = top;
  };
  var Show = function (show) {
      this.show = show;
  };
  var unsafeCompare = $foreign.unsafeCompareImpl(LT.value)(EQ.value)(GT.value);
  var unit = {};
  var top = function (dict) {
      return dict.top;
  }; 
  var showNumber = new Show($foreign.showNumberImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };                  
  var pure = function (dict) {
      return dict.pure;
  };
  var $$return = function (dictApplicative) {
      return pure(dictApplicative);
  };
  var otherwise = true;
  var map = function (dict) {
      return dict.map;
  };
  var $less$dollar$greater = function (dictFunctor) {
      return map(dictFunctor);
  };
  var functorArray = new Functor($foreign.arrayMap);
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  }; 
  var eqNumber = new Eq($foreign.refEq);
  var ordNumber = new Ord(function () {
      return eqNumber;
  }, unsafeCompare);
  var eq = function (dict) {
      return dict.eq;
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  var compare = function (dict) {
      return dict.compare;
  }; 
  var boundedInt = new Bounded($foreign.bottomInt, $foreign.topInt);
  var bottom = function (dict) {
      return dict.bottom;
  };
  var bind = function (dict) {
      return dict.bind;
  };
  var $greater$greater$eq = function (dictBind) {
      return bind(dictBind);
  }; 
  var apply = function (dict) {
      return dict.apply;
  };
  var $less$times$greater = function (dictApply) {
      return apply(dictApply);
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return $less$times$greater(dictApplicative["__superclass_Prelude.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return bind(dictMonad["__superclass_Prelude.Bind_1"]())(f)(function (v) {
                  return bind(dictMonad["__superclass_Prelude.Bind_1"]())(a)(function (v1) {
                      return $$return(dictMonad["__superclass_Prelude.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  var monadArray = new Monad(function () {
      return applicativeArray;
  }, function () {
      return bindArray;
  });
  var bindArray = new Bind(function () {
      return applyArray;
  }, $foreign.arrayBind);
  var applyArray = new Apply(function () {
      return functorArray;
  }, ap(monadArray));
  var applicativeArray = new Applicative(function () {
      return applyArray;
  }, function (x) {
      return [ x ];
  });
  exports["LT"] = LT;
  exports["GT"] = GT;
  exports["EQ"] = EQ;
  exports["Show"] = Show;
  exports["Bounded"] = Bounded;
  exports["Ord"] = Ord;
  exports["Eq"] = Eq;
  exports["Monad"] = Monad;
  exports["Bind"] = Bind;
  exports["Applicative"] = Applicative;
  exports["Apply"] = Apply;
  exports["Functor"] = Functor;
  exports["show"] = show;
  exports["bottom"] = bottom;
  exports["top"] = top;
  exports["unsafeCompare"] = unsafeCompare;
  exports["compare"] = compare;
  exports["eq"] = eq;
  exports["ap"] = ap;
  exports["return"] = $$return;
  exports[">>="] = $greater$greater$eq;
  exports["bind"] = bind;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
  exports["apply"] = apply;
  exports["<$>"] = $less$dollar$greater;
  exports["map"] = map;
  exports["otherwise"] = otherwise;
  exports["const"] = $$const;
  exports["flip"] = flip;
  exports["unit"] = unit;
  exports["functorArray"] = functorArray;
  exports["applyArray"] = applyArray;
  exports["applicativeArray"] = applicativeArray;
  exports["bindArray"] = bindArray;
  exports["monadArray"] = monadArray;
  exports["eqNumber"] = eqNumber;
  exports["ordNumber"] = ordNumber;
  exports["boundedInt"] = boundedInt;
  exports["showInt"] = showInt;
  exports["showNumber"] = showNumber;
})(PS["Prelude"] = PS["Prelude"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Array

  //------------------------------------------------------------------------------
  // Array creation --------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.range = function (start) {
    return function (end) {
      var step = start > end ? -1 : 1;
      var result = [];
      for (var i = start, n = 0; i !== end; i += step) {
        result[n++] = i;
      }
      result[n] = i;
      return result;
    };
  };

  //------------------------------------------------------------------------------
  // Array size ------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.length = function (xs) {
    return xs.length;
  };

  //------------------------------------------------------------------------------
  // Extending arrays ------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.cons = function (e) {
    return function (l) {
      return [e].concat(l);
    };
  };

  //------------------------------------------------------------------------------
  // Non-indexed reads -----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports["uncons'"] = function (empty) {
    return function (next) {
      return function (xs) {
        return xs.length === 0 ? empty({}) : next(xs[0])(xs.slice(1));
      };
    };
  };

  //------------------------------------------------------------------------------
  // Indexed operations ----------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.indexImpl = function (just) {
    return function (nothing) {
      return function (xs) {
        return function (i) {
          return i < 0 || i >= xs.length ? nothing :  just(xs[i]);
        };
      };
    };
  };

  //------------------------------------------------------------------------------
  // Transformations -------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.reverse = function (l) {
    return l.slice().reverse();
  };

  exports.concat = function (xss) {
    var result = [];
    for (var i = 0, l = xss.length; i < l; i++) {
      var xs = xss[i];
      for (var j = 0, m = xs.length; j < m; j++) {
        result.push(xs[j]);
      }
    }
    return result;
  };

  exports.filter = function (f) {
    return function (xs) {
      return xs.filter(f);
    };
  };

  //------------------------------------------------------------------------------
  // Subarrays -------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.slice = function (s) {
    return function (e) {
      return function (l) {
        return l.slice(s, e);
      };
    };
  };

  //------------------------------------------------------------------------------
  // Zipping ---------------------------------------------------------------------
  //------------------------------------------------------------------------------

  exports.zipWith = function (f) {
    return function (xs) {
      return function (ys) {
        var l = xs.length < ys.length ? xs.length : ys.length;
        var result = new Array(l);
        for (var i = 0; i < l; i++) {
          result[i] = f(xs[i])(ys[i]);
        }
        return result;
      };
    };
  };
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();
  var maybe = function (v) {
      return function (v1) {
          return function (v2) {
              if (v2 instanceof Nothing) {
                  return v;
              };
              if (v2 instanceof Just) {
                  return v1(v2.value0);
              };
              throw new Error("Failed pattern match at Data.Maybe line 27, column 1 - line 28, column 1: " + [ v.constructor.name, v1.constructor.name, v2.constructor.name ]);
          };
      };
  };                                                
  var functorMaybe = new Prelude.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var applyMaybe = new Prelude.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Prelude["<$>"](functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 122, column 3 - line 123, column 3: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var bindMaybe = new Prelude.Bind(function () {
      return applyMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return v1(v.value0);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 181, column 3 - line 182, column 3: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  var applicativeMaybe = new Prelude.Applicative(function () {
      return applyMaybe;
  }, Just.create);
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["maybe"] = maybe;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
  exports["applicativeMaybe"] = applicativeMaybe;
  exports["bindMaybe"] = bindMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  exports["Tuple"] = Tuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Maybe.Unsafe

  exports.unsafeThrow = function (msg) {
    throw new Error(msg);
  };
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Data.Maybe.Unsafe"];
  var Prelude = PS["Prelude"];
  var Data_Maybe = PS["Data.Maybe"];        
  var fromJust = function (v) {
      if (v instanceof Data_Maybe.Just) {
          return v.value0;
      };
      if (v instanceof Data_Maybe.Nothing) {
          return $foreign.unsafeThrow("Data.Maybe.Unsafe.fromJust called on Nothing");
      };
      throw new Error("Failed pattern match at Data.Maybe.Unsafe line 11, column 1 - line 12, column 1: " + [ v.constructor.name ]);
  };
  exports["fromJust"] = fromJust;
})(PS["Data.Maybe.Unsafe"] = PS["Data.Maybe.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Data.Array"];
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];        
  var $colon = $foreign.cons;
  var $dot$dot = $foreign.range;
  var zip = $foreign.zipWith(Data_Tuple.Tuple.create);
  var uncons = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (xs) {
          return new Data_Maybe.Just({
              head: x, 
              tail: xs
          });
      };
  });
  var take = $foreign.slice(0);
  var tail = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (v) {
      return function (xs) {
          return new Data_Maybe.Just(xs);
      };
  });
  var span = function (p) {
      var go = function (__copy_acc) {
          return function (__copy_xs) {
              var acc = __copy_acc;
              var xs = __copy_xs;
              tco: while (true) {
                  var $42 = uncons(xs);
                  if ($42 instanceof Data_Maybe.Just && p($42.value0.head)) {
                      var __tco_acc = $colon($42.value0.head)(acc);
                      acc = __tco_acc;
                      xs = $42.value0.tail;
                      continue tco;
                  };
                  return {
                      init: $foreign.reverse(acc), 
                      rest: xs
                  };
              };
          };
      };
      return go([  ]);
  };
  var singleton = function (a) {
      return [ a ];
  };
  var $$null = function (xs) {
      return $foreign.length(xs) === 0;
  };                                                                                  
  var init = function (xs) {
      if ($$null(xs)) {
          return Data_Maybe.Nothing.value;
      };
      if (Prelude.otherwise) {
          return new Data_Maybe.Just($foreign.slice(0)($foreign.length(xs) - 1)(xs));
      };
      throw new Error("Failed pattern match at Data.Array line 228, column 1 - line 245, column 1: " + [ xs.constructor.name ]);
  };
  var index = $foreign.indexImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var head = $foreign["uncons'"](Prelude["const"](Data_Maybe.Nothing.value))(function (x) {
      return function (v) {
          return new Data_Maybe.Just(x);
      };
  });
  var groupBy = function (op) {
      var go = function (__copy_acc) {
          return function (__copy_xs) {
              var acc = __copy_acc;
              var xs = __copy_xs;
              tco: while (true) {
                  var $54 = uncons(xs);
                  if ($54 instanceof Data_Maybe.Just) {
                      var sp = span(op($54.value0.head))($54.value0.tail);
                      var __tco_acc = $colon($colon($54.value0.head)(sp.init))(acc);
                      acc = __tco_acc;
                      xs = sp.rest;
                      continue tco;
                  };
                  if ($54 instanceof Data_Maybe.Nothing) {
                      return $foreign.reverse(acc);
                  };
                  throw new Error("Failed pattern match at Data.Array line 488, column 15 - line 494, column 1: " + [ $54.constructor.name ]);
              };
          };
      };
      return go([  ]);
  };
  var concatMap = Prelude.flip(Prelude.bind(Prelude.bindArray));
  var mapMaybe = function (f) {
      return concatMap(function ($69) {
          return Data_Maybe.maybe([  ])(singleton)(f($69));
      });
  };
  exports["zip"] = zip;
  exports["groupBy"] = groupBy;
  exports["span"] = span;
  exports["take"] = take;
  exports["mapMaybe"] = mapMaybe;
  exports["concatMap"] = concatMap;
  exports["index"] = index;
  exports["uncons"] = uncons;
  exports["init"] = init;
  exports["tail"] = tail;
  exports["head"] = head;
  exports[".."] = $dot$dot;
  exports["singleton"] = singleton;
  exports["filter"] = $foreign.filter;
  exports["concat"] = $foreign.concat;
  exports["length"] = $foreign.length;
})(PS["Data.Array"] = PS["Data.Array"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Data.Int

  exports.fromNumberImpl = function (just) {
    return function (nothing) {
      return function (n) {
        /* jshint bitwise: false */
        return (n | 0) === n ? just(n) : nothing;
      };
    };
  };

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Math

  exports.abs = Math.abs;

  exports.floor = Math.floor;

  exports["%"] = function(n) {
    return function(m) {
      return n % m;
    };
  };

  exports.round = Math.round;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Math"];
  exports["%"] = $foreign["%"];
  exports["round"] = $foreign.round;
  exports["floor"] = $foreign.floor;
  exports["abs"] = $foreign.abs;
})(PS["Math"] = PS["Math"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Data.Int"];
  var Prelude = PS["Prelude"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var $$Math = PS["Math"];                                                                   
  var fromNumber = $foreign.fromNumberImpl(Data_Maybe.Just.create)(Data_Maybe.Nothing.value);
  var unsafeClamp = function (x) {
      if (x >= $foreign.toNumber(Prelude.top(Prelude.boundedInt))) {
          return Prelude.top(Prelude.boundedInt);
      };
      if (x <= $foreign.toNumber(Prelude.bottom(Prelude.boundedInt))) {
          return Prelude.bottom(Prelude.boundedInt);
      };
      if (Prelude.otherwise) {
          return Data_Maybe_Unsafe.fromJust(fromNumber(x));
      };
      throw new Error("Failed pattern match at Data.Int line 49, column 1 - line 56, column 1: " + [ x.constructor.name ]);
  };
  var round = function ($1) {
      return unsafeClamp($$Math.round($1));
  };
  var floor = function ($2) {
      return unsafeClamp($$Math.floor($2));
  };
  exports["round"] = round;
  exports["floor"] = floor;
  exports["fromNumber"] = fromNumber;
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Function = PS["Data.Function"];
  var Data_Monoid = PS["Data.Monoid"];
  var min = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $39 = Prelude.compare(dictOrd)(x)(y);
              if ($39 instanceof Prelude.LT) {
                  return x;
              };
              if ($39 instanceof Prelude.EQ) {
                  return x;
              };
              if ($39 instanceof Prelude.GT) {
                  return y;
              };
              throw new Error("Failed pattern match at Data.Ord line 60, column 3 - line 67, column 1: " + [ $39.constructor.name ]);
          };
      };
  };
  var max = function (dictOrd) {
      return function (x) {
          return function (y) {
              var $42 = Prelude.compare(dictOrd)(x)(y);
              if ($42 instanceof Prelude.LT) {
                  return y;
              };
              if ($42 instanceof Prelude.EQ) {
                  return x;
              };
              if ($42 instanceof Prelude.GT) {
                  return x;
              };
              throw new Error("Failed pattern match at Data.Ord line 69, column 3 - line 81, column 1: " + [ $42.constructor.name ]);
          };
      };
  };
  var clamp = function (dictOrd) {
      return function (low) {
          return function (hi) {
              return function (x) {
                  return min(dictOrd)(hi)(max(dictOrd)(low)(x));
              };
          };
      };
  };
  exports["max"] = max;
  exports["min"] = min;
  exports["clamp"] = clamp;
})(PS["Data.Ord"] = PS["Data.Ord"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Color"];
  var Prelude = PS["Prelude"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Array = PS["Data.Array"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Int = PS["Data.Int"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_Unsafe = PS["Data.Maybe.Unsafe"];
  var Data_Ord = PS["Data.Ord"];
  var Data_String = PS["Data.String"];
  var Data_String_Regex = PS["Data.String.Regex"];
  var $$Math = PS["Math"];
  var HSLA = (function () {
      function HSLA(value0, value1, value2, value3) {
          this.value0 = value0;
          this.value1 = value1;
          this.value2 = value2;
          this.value3 = value3;
      };
      HSLA.create = function (value0) {
          return function (value1) {
              return function (value2) {
                  return function (value3) {
                      return new HSLA(value0, value1, value2, value3);
                  };
              };
          };
      };
      return HSLA;
  })();
  var toRGBA$prime = function (v) {
      var h$prime = v.value0 / 60.0;
      var chr = (1.0 - $$Math.abs(2.0 * v.value2 - 1.0)) * v.value1;
      var m = v.value2 - chr / 2.0;
      var x = chr * (1.0 - $$Math.abs($$Math["%"](h$prime)(2.0) - 1.0));
      var col = (function () {
          if (h$prime < 1.0) {
              return {
                  r: chr, 
                  g: x, 
                  b: 0.0
              };
          };
          if (1.0 <= h$prime && h$prime < 2.0) {
              return {
                  r: x, 
                  g: chr, 
                  b: 0.0
              };
          };
          if (2.0 <= h$prime && h$prime < 3.0) {
              return {
                  r: 0.0, 
                  g: chr, 
                  b: x
              };
          };
          if (3.0 <= h$prime && h$prime < 4.0) {
              return {
                  r: 0.0, 
                  g: x, 
                  b: chr
              };
          };
          if (4.0 <= h$prime && h$prime < 5.0) {
              return {
                  r: x, 
                  g: 0.0, 
                  b: chr
              };
          };
          if (Prelude.otherwise) {
              return {
                  r: chr, 
                  g: 0.0, 
                  b: x
              };
          };
          throw new Error("Failed pattern match at Color line 295, column 1 - line 313, column 1: " + [  ]);
      })();
      return {
          r: col.r + m, 
          g: col.g + m, 
          b: col.b + m, 
          a: v.value3
      };
  };
  var toRGBA = function (v) {
      var c = toRGBA$prime(v);
      var g = Data_Int.round(255.0 * c.g);
      var r = Data_Int.round(255.0 * c.r);
      var b = Data_Int.round(255.0 * c.b);
      return {
          r: r, 
          g: g, 
          b: b, 
          a: v.value3
      };
  }; 
  var modPos = function (x) {
      return function (y) {
          return $$Math["%"]($$Math["%"](x)(y) + y)(y);
      };
  };
  var hsla = function (h) {
      return function (s) {
          return function (l) {
              return function (a) {
                  var s$prime = Data_Ord.clamp(Prelude.ordNumber)(0.0)(1.0)(s);
                  var l$prime = Data_Ord.clamp(Prelude.ordNumber)(0.0)(1.0)(l);
                  var h$prime = modPos(h)(360.0);
                  var a$prime = Data_Ord.clamp(Prelude.ordNumber)(0.0)(1.0)(a);
                  return new HSLA(h$prime, s$prime, l$prime, a$prime);
              };
          };
      };
  };
  var cssStringRGBA = function (col) {
      var c = toRGBA(col);
      var green = Prelude.show(Prelude.showInt)(c.g);
      var red = Prelude.show(Prelude.showInt)(c.r);
      var blue = Prelude.show(Prelude.showInt)(c.b);
      var alpha = Prelude.show(Prelude.showNumber)(c.a);
      var $66 = c.a === 1.0;
      if ($66) {
          return "rgb(" + (red + (", " + (green + (", " + (blue + ")")))));
      };
      if (!$66) {
          return "rgba(" + (red + (", " + (green + (", " + (blue + (", " + (alpha + ")")))))));
      };
      throw new Error("Failed pattern match at Color line 390, column 3 - line 394, column 3: " + [ $66.constructor.name ]);
  };
  exports["cssStringRGBA"] = cssStringRGBA;
  exports["toRGBA"] = toRGBA;
  exports["hsla"] = hsla;
})(PS["Color"] = PS["Color"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff

  exports.returnE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };

  exports.foreachE = function (as) {
    return function (f) {
      return function () {
        for (var i = 0, l = as.length; i < l; i++) {
          f(as[i])();
        }
      };
    };
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Prelude = PS["Prelude"];        
  var monadEff = new Prelude.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Prelude.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Prelude.Apply(function () {
      return functorEff;
  }, Prelude.ap(monadEff));
  var applicativeEff = new Prelude.Applicative(function () {
      return applyEff;
  }, $foreign.returnE);
  var functorEff = new Prelude.Functor(Prelude.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["foreachE"] = $foreign.foreachE;
  exports["runPure"] = $foreign.runPure;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Random

  exports.random = Math.random;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Random"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Int = PS["Data.Int"];
  var randomInt = function (low) {
      return function (high) {
          return function __do() {
              var v = $foreign.random();
              var asNumber = ((Data_Int.toNumber(high) - Data_Int.toNumber(low)) + 1) * v + Data_Int.toNumber(low);
              return Data_Int.floor(asNumber);
          };
      };
  };
  exports["randomInt"] = randomInt;
})(PS["Control.Monad.Eff.Random"] = PS["Control.Monad.Eff.Random"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  // module Control.Monad.Eff.Unsafe

  exports.unsafeInterleaveEff = function (f) {
    return f;
  };
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];        
  var unsafePerformEff = function ($0) {
      return Control_Monad_Eff.runPure($foreign.unsafeInterleaveEff($0));
  };
  exports["unsafePerformEff"] = unsafePerformEff;
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  /* global window */
  "use strict";

  // module DOM.HTML

  exports.window = function () {
    return window;
  };
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["DOM.HTML"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["window"] = $foreign.window;
})(PS["DOM.HTML"] = PS["DOM.HTML"] || {});
(function(exports) {
    "use strict";

  exports.innerWidth = function (window) {
    return function () {
      return window.innerWidth;
    };
  };

  exports.innerHeight = function (window) {
    return function () {
      return window.innerHeight;
    };
  };
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["DOM.HTML.Window"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];
  exports["innerHeight"] = $foreign.innerHeight;
  exports["innerWidth"] = $foreign.innerWidth;
})(PS["DOM.HTML.Window"] = PS["DOM.HTML.Window"] || {});
(function(exports) {
    "use strict";

  // module DOM.RequestAnimationFrame 

  var requestAnimationFrame = null;

  // http://www.paulirish.com/2011/requestanimationframe-for-smart-animating/
  exports.requestAnimationFrame_ = function(window_) {
      return function(action) {

          if (!requestAnimationFrame) {
              requestAnimationFrame = (function() {
                  return window_.requestAnimationFrame ||
                      window_.webkitRequestAnimationFrame ||
                      window_.mozRequestAnimationFrame ||
                      function(callback) {
                          window_.setTimeout(callback, 1000 / 60);
                      };
              })();
          }

          return function() {
              return requestAnimationFrame(action);
          };
      }
  };
})(PS["DOM.RequestAnimationFrame"] = PS["DOM.RequestAnimationFrame"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["DOM.RequestAnimationFrame"];
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var DOM = PS["DOM"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Types = PS["DOM.HTML.Types"];        
  var requestAnimationFrame = function (action) {
      return function __do() {
          var v = DOM_HTML.window();
          return $foreign.requestAnimationFrame_(v)(action)();
      };
  };
  exports["requestAnimationFrame"] = requestAnimationFrame;
})(PS["DOM.RequestAnimationFrame"] = PS["DOM.RequestAnimationFrame"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.getCanvasElementByIdImpl = function(id, Just, Nothing) {
      return function() {
          var el = document.getElementById(id);
          if (el && el instanceof HTMLCanvasElement) {
              return Just(el);
          } else {
              return Nothing;
          }
      };
  };

  exports.getContext2D = function(c) {
      return function() {
          return c.getContext('2d');
      };
  };

  exports.getCanvasWidth = function(canvas) {
      return function() {
          return canvas.width;
      };
  };

  exports.getCanvasHeight = function(canvas) {
      return function() {
          return canvas.height;
      };
  };

  exports.setCanvasWidth = function(width) {
      return function(canvas) {
          return function() {
              canvas.width = width;
              return canvas;
          };
      };
  };

  exports.setCanvasHeight = function(height) {
      return function(canvas) {
          return function() {
              canvas.height = height;
              return canvas;
          };
      };
  };

  exports.setFillStyle = function(style) {
      return function(ctx) {
          return function() {
              ctx.fillStyle = style;
              return ctx;
          };
      };
  };

  exports.fillRect = function(ctx) {
      return function(r) {
          return function() {
              ctx.fillRect(r.x, r.y, r.w, r.h);
              return ctx;
          };
      };
  };
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var $foreign = PS["Graphics.Canvas"];
  var Prelude = PS["Prelude"];
  var Data_ArrayBuffer_Types = PS["Data.ArrayBuffer.Types"];
  var Data_Function = PS["Data.Function"];
  var Data_Maybe = PS["Data.Maybe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Exception_Unsafe = PS["Control.Monad.Eff.Exception.Unsafe"];
  var getCanvasElementById = function (elId) {
      return $foreign.getCanvasElementByIdImpl(elId, Data_Maybe.Just.create, Data_Maybe.Nothing.value);
  };
  var getCanvasDimensions = function (ce) {
      return function __do() {
          var v = $foreign.getCanvasWidth(ce)();
          var v1 = $foreign.getCanvasHeight(ce)();
          return {
              width: v, 
              height: v1
          };
      };
  };
  exports["getCanvasDimensions"] = getCanvasDimensions;
  exports["getCanvasElementById"] = getCanvasElementById;
  exports["fillRect"] = $foreign.fillRect;
  exports["setFillStyle"] = $foreign.setFillStyle;
  exports["setCanvasHeight"] = $foreign.setCanvasHeight;
  exports["setCanvasWidth"] = $foreign.setCanvasWidth;
  exports["getContext2D"] = $foreign.getContext2D;
})(PS["Graphics.Canvas"] = PS["Graphics.Canvas"] || {});
(function(exports) {
  // Generated by psc version 0.8.5.0
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Array = PS["Data.Array"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Tuple = PS["Data.Tuple"];
  var Color = PS["Color"];
  var Control_Monad_Eff_Random = PS["Control.Monad.Eff.Random"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Graphics_Canvas = PS["Graphics.Canvas"];
  var DOM_RequestAnimationFrame = PS["DOM.RequestAnimationFrame"];
  var DOM_HTML = PS["DOM.HTML"];
  var DOM_HTML_Window = PS["DOM.HTML.Window"];        
  var Cell = (function () {
      function Cell(value0) {
          this.value0 = value0;
      };
      Cell.create = function (value0) {
          return new Cell(value0);
      };
      return Cell;
  })();
  var $bar$greater = function (a) {
      return function (b) {
          return b(a);
      };
  };
  var diffcells = function (prevcells) {
      return function (newcells) {
          var filterpred = function (xn) {
              return function (yn) {
                  return function (sn) {
                      var $15 = Prelude[">>="](Data_Maybe.bindMaybe)(Data_Array.index(prevcells)(Data_Int.round(yn)))(function (row) {
                          return Data_Array.index(row)(Data_Int.round(xn));
                      });
                      if ($15 instanceof Data_Maybe.Nothing) {
                          return true;
                      };
                      if ($15 instanceof Data_Maybe.Just) {
                          return !($15.value0.value0.x === xn && ($15.value0.value0.y === yn && $15.value0.value0.state === sn));
                      };
                      throw new Error("Failed pattern match at Main line 53, column 25 - line 56, column 9: " + [ $15.constructor.name ]);
                  };
              };
          };
          return $bar$greater($bar$greater(newcells)(Data_Array.concat))(Data_Array.filter(function (v) {
              return filterpred(v.value0.x)(v.value0.y)(v.value0.state);
          }));
      };
  };
  var colors = 8;
  var evalcell = function (v) {
      return function (prevcells) {
          var y = Data_Int.round(v.value0.y);
          var x = Data_Int.round(v.value0.x);
          var nextstate = (v.value0.state + 1 | 0) % colors;
          var around = $bar$greater([ [ x - 1, y ], [ x + 1 | 0, y ], [ x, y - 1 ], [ x, y + 1 | 0 ] ])(Data_Array.mapMaybe(function (v1) {
              if (v1.length === 2) {
                  return Prelude[">>="](Data_Maybe.bindMaybe)(Data_Array.index(prevcells)(v1[1]))(function (row) {
                      return Data_Array.index(row)(v1[0]);
                  });
              };
              throw new Error("Failed pattern match at Main line 45, column 84 - line 45, column 158: " + [ v1.constructor.name ]);
          }));
          var innext = $bar$greater(around)(Data_Array.filter(function (v1) {
              return v1.value0.state === nextstate;
          }));
          var $34 = Data_Array.length(innext) === 0;
          if ($34) {
              return new Cell({
                  state: v.value0.state, 
                  x: v.value0.x, 
                  y: v.value0.y
              });
          };
          if (!$34) {
              return new Cell({
                  state: nextstate, 
                  x: v.value0.x, 
                  y: v.value0.y
              });
          };
          throw new Error("Failed pattern match at Main line 48, column 17 - line 51, column 1: " + [ $34.constructor.name ]);
      };
  };
  var evaluate = function (prevcells) {
      return $bar$greater(prevcells)(Prelude.map(Prelude.functorArray)(function (row) {
          return $bar$greater(row)(Prelude.map(Prelude.functorArray)(function (el) {
              return evalcell(el)(prevcells);
          }));
      }));
  };
  var makecolor = function (state) {
      var hue = Data_Int.toNumber(state) * (360.0 / Data_Int.toNumber(colors));
      return $bar$greater(Color.hsla(hue)(1.0)(0.5)(0.5))(Color.cssStringRGBA);
  };
  var newcell = function (x) {
      return function (y) {
          return new Cell({
              state: $bar$greater(Control_Monad_Eff_Random.randomInt(0)(colors))(Control_Monad_Eff_Unsafe.unsafePerformEff), 
              x: Data_Int.toNumber(x), 
              y: Data_Int.toNumber(y)
          });
      };
  };
  var claimrow = function (prevrow) {
      return function (xn) {
          return function (yindex) {
              var prevxn = Data_Array.length(prevrow);
              var $39 = prevxn >= xn;
              if ($39) {
                  return Data_Array.take(xn)(prevrow);
              };
              if (!$39) {
                  return Data_Array.concat([ prevrow, $bar$greater(Data_Array[".."](prevxn)(xn))(Prelude.map(Prelude.functorArray)(function (x) {
                      return newcell(x)(yindex);
                  })) ]);
              };
              throw new Error("Failed pattern match at Main line 36, column 17 - line 39, column 1: " + [ $39.constructor.name ]);
          };
      };
  };
  var claimcells = function (prevcells) {
      return function (xn) {
          return function (yn) {
              var prevyn = Data_Array.length(prevcells);
              return $bar$greater($bar$greater((function () {
                  var $40 = prevyn >= yn;
                  if ($40) {
                      return Data_Array.take(yn)(prevcells);
                  };
                  if (!$40) {
                      return Data_Array.concat([ prevcells, $bar$greater(Data_Array[".."](prevyn)(yn))(Prelude.map(Prelude.functorArray)(function (v) {
                          return [  ];
                      })) ]);
                  };
                  throw new Error("Failed pattern match at Main line 30, column 18 - line 30, column 136: " + [ $40.constructor.name ]);
              })())(Data_Array.zip(Data_Array[".."](0)(yn))))(Prelude.map(Prelude.functorArray)(function (v) {
                  return claimrow(v.value1)(xn)(v.value0);
              }));
          };
      };
  };
  var cellsize = 25.0;
  var drawcells = function (ctx) {
      return function (newcells) {
          var groupedcells = $bar$greater(newcells)(Data_Array.groupBy(function (v) {
              return function (v1) {
                  return v.value0.state === v1.value0.state;
              };
          }));
          return Control_Monad_Eff.foreachE(groupedcells)(function (thisgroup) {
              var $54 = Prelude[">>="](Data_Maybe.bindMaybe)(Data_Array.head(thisgroup))(function (v) {
                  return $bar$greater(makecolor(v.value0.state))(Prelude["return"](Data_Maybe.applicativeMaybe));
              });
              if ($54 instanceof Data_Maybe.Nothing) {
                  return Prelude["return"](Control_Monad_Eff.applicativeEff)(Prelude.unit);
              };
              if ($54 instanceof Data_Maybe.Just) {
                  return function __do() {
                      var v = Graphics_Canvas.setFillStyle($54.value0)(ctx)();
                      return Control_Monad_Eff.foreachE(thisgroup)(function (v1) {
                          return function __do() {
                              Graphics_Canvas.fillRect(v)({
                                  x: v1.value0.x * cellsize, 
                                  y: v1.value0.y * cellsize, 
                                  w: cellsize, 
                                  h: cellsize
                              })();
                              return Prelude.unit;
                          };
                      })();
                  };
              };
              throw new Error("Failed pattern match at Main line 64, column 25 - line 73, column 1: " + [ $54.constructor.name ]);
          });
      };
  };
  var loop = function (prevcells) {
      return function (canvas) {
          return function (ctx) {
              return DOM_RequestAnimationFrame.requestAnimationFrame(function __do() {
                  var v = Graphics_Canvas.getCanvasDimensions(canvas)();
                  (function __do() {
                      var n = Prelude[">>="](Control_Monad_Eff.bindEff)(DOM_HTML.window)(DOM_HTML_Window.innerWidth)();
                      var n1 = Data_Int.toNumber(n);
                      var $62 = n1 !== v.width;
                      if ($62) {
                          return Graphics_Canvas.setCanvasWidth(n1)(canvas)();
                      };
                      if (!$62) {
                          return canvas;
                      };
                      throw new Error("Failed pattern match at Main line 76, column 104 - line 77, column 17: " + [ $62.constructor.name ]);
                  })();
                  (function __do() {
                      var n = Prelude[">>="](Control_Monad_Eff.bindEff)(DOM_HTML.window)(DOM_HTML_Window.innerHeight)();
                      var n1 = Data_Int.toNumber(n);
                      var $63 = n1 !== v.height;
                      if ($63) {
                          return Graphics_Canvas.setCanvasHeight(n1)(canvas)();
                      };
                      if (!$63) {
                          return canvas;
                      };
                      throw new Error("Failed pattern match at Main line 77, column 105 - line 78, column 17: " + [ $63.constructor.name ]);
                  })();
                  var v1 = $bar$greater($bar$greater(claimcells(prevcells)(1 + Data_Int.round(v.width / cellsize) | 0)(1 + Data_Int.round(v.height / cellsize) | 0))(evaluate))(Prelude["return"](Control_Monad_Eff.applicativeEff))();
                  $bar$greater($bar$greater(v1)(diffcells(prevcells)))(drawcells(ctx))();
                  return loop(v1)(canvas)(ctx)();
              });
          };
      };
  };
  var main = function __do() {
      var v = Graphics_Canvas.getCanvasElementById("canvas")();
      if (v instanceof Data_Maybe.Just) {
          var v1 = Graphics_Canvas.getContext2D(v.value0)();
          return loop([  ])(v.value0)(v1)();
      };
      throw new Error("Failed pattern match at Main line 84, column 8 - line 87, column 24: " + [ v.constructor.name ]);
  };
  exports["Cell"] = Cell;
  exports["main"] = main;
  exports["loop"] = loop;
  exports["drawcells"] = drawcells;
  exports["diffcells"] = diffcells;
  exports["evalcell"] = evalcell;
  exports["evaluate"] = evaluate;
  exports["claimrow"] = claimrow;
  exports["claimcells"] = claimcells;
  exports["newcell"] = newcell;
  exports["makecolor"] = makecolor;
  exports["colors"] = colors;
  exports["cellsize"] = cellsize;
  exports["|>"] = $bar$greater;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();

},{}]},{},[1]);
